worker_processes 1;

# user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  stderr warn;
pid /tmp/nginx.pid;

events {
  worker_connections 512; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  client_body_temp_path /tmp/nginx_client_body_tmp;
  proxy_temp_path /tmp/nginx_proxy_tmp;
  access_log off;
  # proxy_cache_path /tmp/nginx_cache;
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  sendfile on;
  # disable maxy body size check
  client_max_body_size 0;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/gunicorn.sock fail_timeout=0d;
    keepalive 16;
  }

  server {
    fastcgi_temp_path /tmp/nginx_fastcgi_temp;
    proxy_temp_path /tmp/nginx_proxy_temp;
    scgi_temp_path /tmp/nginx_scgi_temp;
    uwsgi_temp_path /tmp/nginx_uwsgi_temp;
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 8080;
    # listen 443 quic;

    keepalive_timeout 5;

    # path for static files
    root /path/to/app/current/public;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-Proto "https";  # Hard code https
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Prefix /;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_http_version 1.1;
      proxy_pass http://app_server;
      proxy_ignore_client_abort on;
      proxy_buffering on;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /path/to/app/current/public;
    }
  }
}